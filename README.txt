The following is a description of the contents of the folder that this README is contained in:

/CFGs: This is a folder containing the CFGs of the several test programs our team created as test cases for the CGAN 
we created in the course of our project.These CFGs were created using Py2cfg. They describe the possible paths through
the test cases we used for evaluating the CGAN created.

/CGAN: This folder containes two python scripts, one called CGAN_implementatation.py and CGAN_training.py. The use of these two python
scripts is overviewed in the tutorial section below.

/CGAN/Trained Models: This folder contains three .pt files. These .pt files are models that our team trained in the course of this
research project. The CGAN_implementation.py script can be used to implement these models. Again, this is overviewed in the tutorial
section below.

/CGAN/__pycache__: This is a python specific folder that VSCode created. Our team did not create this folder.

/Inputs generated using NN: This folder contains three CSV files, containing inputs that were generated using the CGAN our team created.
These CSV files were used to measure the performance of our CGAN we created. These CSV files contain two columns. One column is an input column,
the other is a path column. The input column is some input generated by our CGAN that is likely to take the path that the input is matched with
through the program specified in the file name.

/Path requests for generator testing: This folder contains three CSV files that are used by giving them to a trained CGAN model. The CGAN
model then attempts to create inputs that will take the path requested. The use of these files is explained in the tutorial section below.

/related papers: This folder contains some papers that overview work related to our project.

/Test Case Code: This folder contains code that was used to test the performance of our CGAN. the test_programs.py script and 
the TestBuild1.ipynb were used to test both simple programs that are mentioned in our paper, 
and the Buggt_test_Case.py script was used to test the performance of the CGAN in an actual debugging situation. A tutorial for how to use
our network for this actual debuggin situation is given below.

/Training Data: This folder contains three CSV files. These files contain many rows. Each row is an input given to the program
specified in the file name, matched with which path that input took through the program. Note that paths are specified using a series
of zeroes and ones, meant to indicate either a true or false branch through an if statement. This data is used to train the CGAN we created.

Performance.py: This file was used to measure the accuracy of a trained CGAN model, and its ability to correctly generated inputs
that would take a specified path. Measurements include total number of entries, inputs that correctly take the path they were 
generated for, inputs that don't take the path they were generated for, the percentage of generated inputs that correctly take
the path they were generated for, the percentage of inputs that don't correctly take the path they were generated for, and the
average path correctness, which is a percentage specifying throughout all the true and false branches given in the large list
of specified paths, what percentage of correct true and correct false branches are taken by the inputs generated by the CGAN.

requirements.txt: This text file is used in the tutorial section below.

-------------------------------------------------------------------------------------------------------------------------------------
Tutorial
-------------------------------------------------------------------------------------------------------------------------------------

This is a tutorial to guide a user through using our CGAN model to generate test cases for a specific program. The program used in this tutorial
is the Buggy_test_Case.py script. This script contains three possible paths through the program. Two paths are completely safe, and the other
path contains a potential divide by zero error, that can be caused by a random number generator. This test case is based on a test case
contained in the Juliet test case collection, mentioned in our paper. The specific test case this is based on is a Juliet test case where a random
number has one added to it. This can possibly result in an integer overflow error. This specific case could not be used for our purposes, 
because Python dynamically allocates memory to integer objects, meaning that integer overflow errors are not a thing in Python. (Technically
they are, but they work completely differently, and are caused by Python libraries that have a C backend.) Because of this, we decided to have
this test case potentially have a divide by zero error, rather than an integer overflow error.

DISCLAIMER: The test case that is described in this README has elements of random number generation. That means that
at step 9, there is ~5% chance that you will trigger a bug that has purposely been placed in the script. If this occurs,
just rerun steps 7-9 until you do not trigger a bug. Additionally, in step 28, there is ~2% chance that you will
not trigger the bug when running these test cases. Again, if this happens, you can just rerun steps 24-28.

This README will guide you through how to use our CGAN to detect a bug in the Buggy_test_Case.py script.

1) This readme assumes the following:

2) You're running this script on Windows.

4) You're running on AMD64 architecture. This may also work on x64, we don't know, we al have Windows computers.
This does not work on arm64.

5) You have venv, Python, and pip installed.

If you don't have Python, venv, or pip installed, follow these instructions for your platform:
https://phoenixnap.com/kb/how-to-install-python-3-windows

1) Open the windows command prompt.

2) CD into the CPRE 513 Final Project folder that this README is contained in.

3) Once this is all setup, find the requirements.txt file in the same folder as this file.

4) Run the command "python -m venv <environment_name>" replacing <environment_name> with any name.

5) Run the command ".\<environment_name>\Scripts\activate" (This is the command on Windows. If you're using another platform, Google is your friend for how to actiavte a venv environment on that platform)

6) Run the command "pip install -r requirements.txt"

7) Run the command "python "Test Case Code/Buggy_test_Case.py""

8)Tell the script you would like to run it using random inputs, by entering "2" then pressing enter.

9) What this command does is it runs a buggy program 100 times, with 100 random inputs between 0 and 1000.
It then saves the path that each input took, as well as the input that caused that path, and then saves
this information to a CSV called Buggy_test_case.csv in the Training Data folder.

10) Now, we will use this data to train the CGAN.

11) Run the command "python "CGAN/CGAN_training.py""

12) When the script prompts you, enter the path for the training data you want to use 
(this will be Training Data/Buggy_test_case.csv)

13) The script will then tell you how many data points this training data has. The data we've just generated has
100 data points. The script will ask you what batch size you want to use. 16 is a good number for this.

14) The script will now ask you how many epochs you want to run. 100 is a good number for this.

15) The script will now ask you what you want to name your generator. Name it Buggy_generator.

16) Once the generator has finished training, you will have a new file called Buggy_generator.pt. 
This .pt file is similar to the saved CGAN models in the /CGAN/Trained Models folder mentioned in the above section.

17) Run the command "python "CGAN/CGAN_implementation.py""

18) Give the path to the Buggy_generator.pt file, when it prompts you.(The Buggy_generator.pt file will be in the 
CPRE 513 Final Project folder)

19) Now, give the path to the training data you used to train this model. 
This path will be Training Data\Buggy_test_case.csv.

20) Now, the script will ask you for a path to a file of path requests. This is a file with a list of paths that you're
asking the model to generate input for.

21) Give the model the path: 
Path requests for generator testing\Sample_test_cases_for_model_evaluation_of_buggy_test_case.csv. Details of this specific
directory are given in the above section.

22) Now, the script will ask you what you want the output file to be called for these path requests. Name it 
Buggy_generator_output.

23) You will now have a file called "Buggy_generator_output.csv". If you look at this file, you will see it is a CSV
with a path column, and an input column. This file is essentially a list of inputs that the generator believes
will take the path "1;1", that is, True, True. We do the path True, True becuase we know that we have a potential
security risk along this path (the random number generation) so we want to throughly test this path to ensure
there is no security risk. The format and purpose of this file is similar to the files in the /Inputs generated using NN folder
that is mentioned in the above section.

24) Now that you have generated this input, run the command "python "Test Case Code/Buggy_test_case.py"" again.

25) This time, tell it you want to read its inputs from a CSV file, by entering a "1".

26) Give it the path to the CSV file. This will be the path "Buggy_generator_output.csv".

27) The script will now run through 4000 artifically generated inputs, that are likely to take the path "True, True".

28) This means the script will take a path with a security risk 4000 times, hopefully testing it to the point that
any bugs will be revealed. You will most likely get a divide by zero error when running these test cases.


